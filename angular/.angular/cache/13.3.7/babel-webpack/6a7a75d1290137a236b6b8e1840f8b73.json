{"ast":null,"code":"import { HttpErrorResponse } from '@angular/common/http';\nimport { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, filter, switchMap, take } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./local-storage.service\";\nimport * as i2 from \"./auth.service\";\nimport * as i3 from \"@angular/router\";\nexport let TokenInterceptor = /*#__PURE__*/(() => {\n  class TokenInterceptor {\n    constructor(localStorageService, authService, router) {\n      this.localStorageService = localStorageService;\n      this.authService = authService;\n      this.router = router;\n      this.accessTokenSubject = new BehaviorSubject(null);\n    }\n\n    intercept(req, next) {\n      const accessToken = this.localStorageService.getItem('token');\n      return next.handle(this.addAuthorizationHeader(req, accessToken)).pipe(catchError(err => {\n        // in case of 401 http error\n        if (err instanceof HttpErrorResponse && err.status === 401) {\n          // get refresh tokens\n          const refreshToken = this.localStorageService.getItem('refreshToken'); // if there are tokens then send refresh token request\n\n          if (refreshToken && accessToken) {\n            return this.refreshToken(req, next);\n          } // otherwise logout and redirect to login page\n\n\n          return this.logoutAndRedirect(err);\n        } // in case of 403 http error (refresh token failed)\n\n\n        if (err instanceof HttpErrorResponse && err.status === 403) {\n          // logout and redirect to login page\n          return this.logoutAndRedirect(err);\n        } // if error has status neither 401 nor 403 then just return this error\n\n\n        return throwError(err);\n      }));\n    }\n\n    addAuthorizationHeader(request, token) {\n      if (token) {\n        return request.clone({\n          setHeaders: {\n            Authorization: `Bearer ${token}`\n          }\n        });\n      }\n\n      return request;\n    }\n\n    logoutAndRedirect(err) {\n      this.authService.logout();\n      this.router.navigateByUrl('/login');\n      return throwError(err);\n    }\n\n    refreshToken(request, next) {\n      if (!this.refreshingInProgress) {\n        this.refreshingInProgress = true;\n        this.accessTokenSubject.next(null);\n        return this.authService.refreshToken().pipe(switchMap(res => {\n          this.refreshingInProgress = false;\n          this.accessTokenSubject.next(res.accessToken); // repeat failed request with new token\n\n          return next.handle(this.addAuthorizationHeader(request, res.accessToken));\n        }));\n      } else {\n        // wait while getting new token\n        return this.accessTokenSubject.pipe(filter(token => token !== null), take(1), switchMap(token => {\n          // repeat failed request with new token\n          return next.handle(this.addAuthorizationHeader(request, token));\n        }));\n      }\n    }\n\n  }\n\n  TokenInterceptor.ɵfac = function TokenInterceptor_Factory(t) {\n    return new (t || TokenInterceptor)(i0.ɵɵinject(i1.LocalStorageService), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.Router));\n  };\n\n  TokenInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: TokenInterceptor,\n    factory: TokenInterceptor.ɵfac\n  });\n  return TokenInterceptor;\n})();","map":null,"metadata":{},"sourceType":"module"}