{"ast":null,"code":"import { BehaviorSubject, of } from 'rxjs';\nimport { switchMap, tap } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./local-storage.service\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, localStorageService) {\n      this.http = http;\n      this.localStorageService = localStorageService;\n      this.user$ = new BehaviorSubject(null);\n    }\n\n    login(form) {\n      return this.http.post(`${environment.apiUrl}/auth/login`, form).pipe(tap(response => {\n        this.user$.next(response.user);\n        this.setToken('token', response.accessToken);\n      }));\n    }\n\n    logout() {\n      this.localStorageService.removeItem('token');\n      this.user$.next(null);\n    }\n\n    getCurrentUser() {\n      return this.user$.pipe(switchMap(user => {\n        // check if we already have user data\n        if (user) {\n          return of(user);\n        }\n\n        const token = this.localStorageService.getItem('token');\n        console.log('!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!');\n        console.log(token); // if there is token then fetch the current user\n\n        if (token) {\n          return this.fetchCurrentUser();\n        }\n\n        return of(null);\n      }));\n    }\n\n    fetchCurrentUser() {\n      return this.http.get(`${environment.apiUrl}/auth/current-user`).pipe(tap(user => {\n        this.user$.next(user);\n      }));\n    }\n\n    refreshToken() {\n      const refreshToken = this.localStorageService.getItem('refreshToken');\n      return this.http.post(`${environment.apiUrl}/refresh-token`, {\n        refreshToken\n      }).pipe(tap(response => {\n        this.setToken('token', response.accessToken);\n        this.setToken('refreshToken', response.refreshToken);\n      }));\n    }\n\n    setToken(key, token) {\n      this.localStorageService.setItem(key, token);\n    }\n\n  }\n\n  AuthService.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LocalStorageService));\n  };\n\n  AuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module"}